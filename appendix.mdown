class: s s-top s_padding-small

## I.2 Quiz: Array-Indizes

```javascript
var myArray = [1, 2, 3];
myArray[-1] = 'a';
myArray;          // ?????????
```

.c-list[
<br>
+ **A**: `[1, 2, 3]`
+ **B**: `['a', 1, 2, 3]`
+ **C**: `[1, 2, 'a']`
]

???
+ .text-red[**überspringen???**]
+ .grey[Ruby: `myArray[-1]` für letztes Element des Arrays]

---

class: s s-top s_padding-small

## I.2 Quiz: Array-Indizes

```javascript
var myArray = [1, 2, 3];
myArray[-1] = 'a';
myArray;          // ?????????
```

.c-list[
<br>
+ .text-background-translucent-yellow[**A**: `[1, 2, 3]`]
+ **B**: `['a', 1, 2, 3]`
+ **C**: `[1, 2, 'a']`
]

---

class: s s-top s_padding-small

## I.2 Antwort: A

```javascript
var myArray = [1, 2, 3];
myArray[-1] = 'a';
*myArray;          // [1, 2, 3]
myArray.length;   // 3
myArray['-1'];    // 'a'
```
.c-list.u-padding-top-40[
+ .text-smaller[Arrays können **gleichzeitig assoziativ und numerisch** indizierte Elemente haben]
+ .text-smaller[Array-Indizes außerhalb **[0, 2<sup>32</sup>-1]** werden zu Strings umgewandelt]
+ .text-smaller[assoziativ indizierte Elemente lassen sich nur explizit auslesen.]
+ .text-smaller[&rArr; Arrays nur mit numerischem Index, Objekte für assoziative Arrays nutzen.]
]

???
.grey[
+ außerdem: `myArray[-1]; // 'a'` und `myArray['0']; // 1`
+ [JavaScript Associative Arrays Considered Harmful](http://andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful)
]

---

class: s s-top s-left

## I.3 Quiz: 90.000$ Bug

```javascript
var myArray = [];
var foo;
myArray[foo++] = 'x';
```

**Was ist `myArray`?**
.c-list[
+ **A**: `[<1 empty slot>, 'x']`
+ **B**:  `[]`
+ **C**: Wirft Fehler bei der letzten Zuweisung.
]

???
+ .text-red[**überspringen???**]

---

class: s s-top s-left

## I.3 Quiz: 90.000$ Bug

```javascript
var myArray = [];
var foo;
myArray[foo++] = 'x';
```

**Was ist `myArray`?**
.c-list[
+ **A**: `[<1 empty slot>, 'x']`
+ .text-background-translucent-yellow[**B**:  `[]`]
+ **C**: Wirft Fehler bei der letzten Zuweisung.
]

???
+ .text-red[**nächste Erklärungsfolie weglassen, um Zeit zu sparen?**]

---

class: s s-top s-left

## I.3 Antwort: B

```javascript
var myArray = [];
var foo;
myArray[foo++] = 'x';

*foo;           // undefined
*foo++;         // NaN
*myArray;       // []
*myArray[NaN];  //'x'
```

.c-list.u-width-70.u-padding-top-40[
+ 90.000$ Schaden, da dieser Code ein paar Stunden in einem JS Bitcoin Client online war
]

???
+ `foo` ist `undefined`
+ `undefined++` gibt `NaN`
+ `myArray[NaN]` schreibt assoziativ indiziertes Element, kein Fehler wird geworfen

.grey[
+ Quelle: [Type safety and RNGs](https://medium.com/@octskyward/type-safety-and-rngs-40e3ec71ab3a)
]

---

class: s s-center

## Sprachen beurteilen

.c-list.u-width-70[
+ es gibt **keine universell beste** Programmiersprache
+ jede Sprache ist ein **Kompromiss**, der bestimmt Vor- und Nachteile mit sich bringt
+ &bdquo;Sprache X ist **gut geeignet** Probleme der und der Art zu lösen&ldquo;
]

---

class: s s-top s_background-25 s_background-bottom s_padding-small
background-image: url(images/blobfish.jpg)

## Evolution von Programmiersprachen

.c-list.u-width-70[
+ Probleme = **Beute**
+ Programmiersprachen = **Jäger**
+ Hardware &amp; Infrastruktur = **Ökosystem**
<br><br>
+ evolutionäre Anpassung ist unabhängig von Schönheit
+ Fortran &amp; COBOL waren gut für die Probleme ihrer Zeit
]

---

class: s s_background-grey
background-image: url(images/goetz-stewardship.png)

---

class: s s-center

## Schwierigkeit für Sprachschöpfer

.c-list.u-width-70[
+ Konsequenzen von Änderungen und Erweiterungen sind schwer abzuschätzen
  - deshalb war ES6 sechs Jahre in der Mache
+ Features, die zunächst gefeiert wurden und dann zum Tod der Sprache führten
  - COBOLs `ALTER`-Befehl, um `GOTO`-Ziele von Paragraphen von außen zu ändern
]

---

# Beispiel für beantragtes ES7 Feature

Objekte per Spreadoperator klonen:

```javascript
var oldObj = { foo: 'hello', bar: 'world' };
var newObj = { ...oldObj, foo: 'hi' };
console.log(newObj.foo); // 'hi';
console.log(newObj.bar); // 'world';
```

???
+ Quelle: [https://gist.github.com/sebmarkbage/07bbe37bc42b6d4aef81#whats-with-the-weird--notation](https://gist.github.com/sebmarkbage/07bbe37bc42b6d4aef81#whats-with-the-weird--notation)

---

## Tips
+ nicht fragen welche Sprache oder welches Framework soll ich lernen. Egal was ihr lernt, schaut, dass ihr bessere Programmierer werdet indem ihr Grundlagen lernt, die von Dauer sind - gemeinsame Patterns, die es in mehreren Sprachen gibt lernen.
+ JavaScript macht gerade viel Spaß, da dort viel passiert und mit Babel, ES6&7 endlich auch die Syntax erweitert werden kann
+ andere Sprachen anschauen, nur so kann man seine eigenen Sprachen kritisch betrachten
  - ähnlich wie Grammatik lernen: geht in Fremdsprache viel einfacher als in Muttersprache

---

class: s s-top u-no-padding-horizontal

# Bonus: Spannende Entwicklungen

.row[

.col.col-33[
.text-smaller[**JS Entwicklungen**]
<br><br>
.c-list.c-list_narrow[
+ .text-smallest[ReactJS]
+ .text-smallest[Immutable.js]
+ .text-smallest[Flow]
+ .text-smallest[GraphQL / Falcor]
+ .text-smallest[Redux]
+ .text-smallest[Transit]
+ .text-smallest[Cycle.js]
]]

.col.col-33[
.text-smaller[**Jenseits JS**]
<br><br>
.c-list.c-list_narrow[
+ .text-smallest[ClojureScript]
+ .text-smallest[Om]
+ .text-smallest[DataScript]
+ .text-smallest[Elm]
]]

.col.col-33[
.text-smaller[**Spannende Themen**]
<br><br>
.c-list.c-list_narrow[
+ .text-smallest[Funktionale Programmierung]
+ .text-smallest[Unveränderliche Datenstrukturen (immutable data structures)]
+ .text-smallest[Functional Reactive Programming]
]]
]

---

class: s s_padding-small

## Links

+ [JavaScript API beim Mozilla Developer Network](https://developer.mozilla.org/en/docs/Web/JavaScript)
+ [CologneJS](http://colognejs.de)
+ https://brendaneich.github.io/ModernWeb.tw-2015/
+ https://shaunlebron.github.io/solar-system-of-js
+ http://exploringjs.com/
+ https://leanpub.com/understandinges6/read/
+ https://github.com/addyosmani/es6-equivalents-in-es5
+ projects.formidablelabs.com/es6-interactive-guide/
+ https://kangax.github.io/compat-table/es6/
+ https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js

---

# Ausblick

+ ES6 ist n Lederhandschuh, ClojureScript etc. ist n richtiges Schwert mit Griff
+ ES7 ist in der Mache - soll 2016 kommen
+ Aufnahmeprozess neuer Features ist durch Entwicklergemeinde mitgesteuert, mit Babel kann man früh Feedback zu vorgeschlagenen Syntaxerweiterungen bekommen

## Trends:
+ JS sicherer machen mit zu-JS-kompilierenden Sprachen (Clojurescript, Typescript, Purescript, Elm etc.)


class: s s-center

## ES6 Gotchas

+ keine Kommata zwischen Methoden in Klassen (aber in Objekten)

.row.row_padding-none-horizontal[

.col.col-50[
.text-code_small[
```javascript
class User {
  methodA() {
    // ,,,
  }

  methodB() {
    // ,,, ;
  }
}
```
]
]

.col.col-50[
.text-code_small[
```javascript
let user = {
  methodA() {
    // ,,,
  },

  methodB() {
    // ,,, ;
  }
}
```
]
]
]

---

## ES6 Gotchas

.c-list.u-width-70[
+ andere Pfeilsyntax für Methoden
+ implizite `returns`
]

---


